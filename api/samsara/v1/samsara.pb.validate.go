// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/samsara/v1/samsara.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCoinFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCoinFlowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCoinFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCoinFlowRequestMultiError, or nil if none found.
func (m *ListCoinFlowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoinFlowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListCoinFlowRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := ListCoinFlowRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListCoinFlowRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCoinFlowRequestMultiError(errors)
	}

	return nil
}

// ListCoinFlowRequestMultiError is an error wrapping multiple validation
// errors returned by ListCoinFlowRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCoinFlowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoinFlowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoinFlowRequestMultiError) AllErrors() []error { return m }

// ListCoinFlowRequestValidationError is the validation error returned by
// ListCoinFlowRequest.Validate if the designated constraints aren't met.
type ListCoinFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoinFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoinFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoinFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoinFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoinFlowRequestValidationError) ErrorName() string {
	return "ListCoinFlowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoinFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoinFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoinFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoinFlowRequestValidationError{}

// Validate checks the field values on ListCoinFlowReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCoinFlowReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCoinFlowReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCoinFlowReplyMultiError, or nil if none found.
func (m *ListCoinFlowReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoinFlowReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCoinFlowReplyValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCoinFlowReplyValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCoinFlowReplyValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCoinFlowReplyMultiError(errors)
	}

	return nil
}

// ListCoinFlowReplyMultiError is an error wrapping multiple validation errors
// returned by ListCoinFlowReply.ValidateAll() if the designated constraints
// aren't met.
type ListCoinFlowReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoinFlowReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoinFlowReplyMultiError) AllErrors() []error { return m }

// ListCoinFlowReplyValidationError is the validation error returned by
// ListCoinFlowReply.Validate if the designated constraints aren't met.
type ListCoinFlowReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoinFlowReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoinFlowReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoinFlowReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoinFlowReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoinFlowReplyValidationError) ErrorName() string {
	return "ListCoinFlowReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoinFlowReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoinFlowReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoinFlowReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoinFlowReplyValidationError{}

// Validate checks the field values on InfoCoinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InfoCoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoCoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoCoinRequestMultiError, or nil if none found.
func (m *InfoCoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoCoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := InfoCoinRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InfoCoinRequestMultiError(errors)
	}

	return nil
}

// InfoCoinRequestMultiError is an error wrapping multiple validation errors
// returned by InfoCoinRequest.ValidateAll() if the designated constraints
// aren't met.
type InfoCoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoCoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoCoinRequestMultiError) AllErrors() []error { return m }

// InfoCoinRequestValidationError is the validation error returned by
// InfoCoinRequest.Validate if the designated constraints aren't met.
type InfoCoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoCoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoCoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoCoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoCoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoCoinRequestValidationError) ErrorName() string { return "InfoCoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e InfoCoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoCoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoCoinRequestValidationError{}

// Validate checks the field values on InfoCoinReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoCoinReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoCoinReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoCoinReplyMultiError, or
// nil if none found.
func (m *InfoCoinReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoCoinReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoCoinReplyValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoCoinReplyValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoCoinReplyValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InfoCoinReplyMultiError(errors)
	}

	return nil
}

// InfoCoinReplyMultiError is an error wrapping multiple validation errors
// returned by InfoCoinReply.ValidateAll() if the designated constraints
// aren't met.
type InfoCoinReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoCoinReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoCoinReplyMultiError) AllErrors() []error { return m }

// InfoCoinReplyValidationError is the validation error returned by
// InfoCoinReply.Validate if the designated constraints aren't met.
type InfoCoinReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoCoinReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoCoinReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoCoinReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoCoinReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoCoinReplyValidationError) ErrorName() string { return "InfoCoinReplyValidationError" }

// Error satisfies the builtin error interface
func (e InfoCoinReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoCoinReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoCoinReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoCoinReplyValidationError{}

// Validate checks the field values on OperateCoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperateCoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperateCoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperateCoinRequestMultiError, or nil if none found.
func (m *OperateCoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OperateCoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if _, ok := _OperateCoinRequest_CoinType_InLookup[m.GetCoinType()]; !ok {
		err := OperateCoinRequestValidationError{
			field:  "CoinType",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Funds

	if len(errors) > 0 {
		return OperateCoinRequestMultiError(errors)
	}

	return nil
}

// OperateCoinRequestMultiError is an error wrapping multiple validation errors
// returned by OperateCoinRequest.ValidateAll() if the designated constraints
// aren't met.
type OperateCoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperateCoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperateCoinRequestMultiError) AllErrors() []error { return m }

// OperateCoinRequestValidationError is the validation error returned by
// OperateCoinRequest.Validate if the designated constraints aren't met.
type OperateCoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateCoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateCoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateCoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateCoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateCoinRequestValidationError) ErrorName() string {
	return "OperateCoinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OperateCoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateCoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateCoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateCoinRequestValidationError{}

var _OperateCoinRequest_CoinType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on OperateCoinReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperateCoinReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperateCoinReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperateCoinReplyMultiError, or nil if none found.
func (m *OperateCoinReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OperateCoinReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	if len(errors) > 0 {
		return OperateCoinReplyMultiError(errors)
	}

	return nil
}

// OperateCoinReplyMultiError is an error wrapping multiple validation errors
// returned by OperateCoinReply.ValidateAll() if the designated constraints
// aren't met.
type OperateCoinReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperateCoinReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperateCoinReplyMultiError) AllErrors() []error { return m }

// OperateCoinReplyValidationError is the validation error returned by
// OperateCoinReply.Validate if the designated constraints aren't met.
type OperateCoinReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateCoinReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateCoinReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateCoinReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateCoinReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateCoinReplyValidationError) ErrorName() string { return "OperateCoinReplyValidationError" }

// Error satisfies the builtin error interface
func (e OperateCoinReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateCoinReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateCoinReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateCoinReplyValidationError{}

// Validate checks the field values on ListCoinFlowReply_CoinFlowList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCoinFlowReply_CoinFlowList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCoinFlowReply_CoinFlowList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCoinFlowReply_CoinFlowListMultiError, or nil if none found.
func (m *ListCoinFlowReply_CoinFlowList) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoinFlowReply_CoinFlowList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCoinFlowReply_CoinFlowListValidationError{
						field:  fmt.Sprintf("Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCoinFlowReply_CoinFlowListValidationError{
						field:  fmt.Sprintf("Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCoinFlowReply_CoinFlowListValidationError{
					field:  fmt.Sprintf("Info[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCoinFlowReply_CoinFlowListMultiError(errors)
	}

	return nil
}

// ListCoinFlowReply_CoinFlowListMultiError is an error wrapping multiple
// validation errors returned by ListCoinFlowReply_CoinFlowList.ValidateAll()
// if the designated constraints aren't met.
type ListCoinFlowReply_CoinFlowListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoinFlowReply_CoinFlowListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoinFlowReply_CoinFlowListMultiError) AllErrors() []error { return m }

// ListCoinFlowReply_CoinFlowListValidationError is the validation error
// returned by ListCoinFlowReply_CoinFlowList.Validate if the designated
// constraints aren't met.
type ListCoinFlowReply_CoinFlowListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoinFlowReply_CoinFlowListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoinFlowReply_CoinFlowListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoinFlowReply_CoinFlowListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoinFlowReply_CoinFlowListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoinFlowReply_CoinFlowListValidationError) ErrorName() string {
	return "ListCoinFlowReply_CoinFlowListValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoinFlowReply_CoinFlowListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoinFlowReply_CoinFlowList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoinFlowReply_CoinFlowListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoinFlowReply_CoinFlowListValidationError{}

// Validate checks the field values on ListCoinFlowReply_CoinFlowList_CoinFlow
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCoinFlowReply_CoinFlowList_CoinFlow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCoinFlowReply_CoinFlowList_CoinFlow with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListCoinFlowReply_CoinFlowList_CoinFlowMultiError, or nil if none found.
func (m *ListCoinFlowReply_CoinFlowList_CoinFlow) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCoinFlowReply_CoinFlowList_CoinFlow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Funds != nil {
		// no validation rules for Funds
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if len(errors) > 0 {
		return ListCoinFlowReply_CoinFlowList_CoinFlowMultiError(errors)
	}

	return nil
}

// ListCoinFlowReply_CoinFlowList_CoinFlowMultiError is an error wrapping
// multiple validation errors returned by
// ListCoinFlowReply_CoinFlowList_CoinFlow.ValidateAll() if the designated
// constraints aren't met.
type ListCoinFlowReply_CoinFlowList_CoinFlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCoinFlowReply_CoinFlowList_CoinFlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCoinFlowReply_CoinFlowList_CoinFlowMultiError) AllErrors() []error { return m }

// ListCoinFlowReply_CoinFlowList_CoinFlowValidationError is the validation
// error returned by ListCoinFlowReply_CoinFlowList_CoinFlow.Validate if the
// designated constraints aren't met.
type ListCoinFlowReply_CoinFlowList_CoinFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) ErrorName() string {
	return "ListCoinFlowReply_CoinFlowList_CoinFlowValidationError"
}

// Error satisfies the builtin error interface
func (e ListCoinFlowReply_CoinFlowList_CoinFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCoinFlowReply_CoinFlowList_CoinFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCoinFlowReply_CoinFlowList_CoinFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCoinFlowReply_CoinFlowList_CoinFlowValidationError{}

// Validate checks the field values on InfoCoinReply_Coin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InfoCoinReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoCoinReply_Coin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InfoCoinReply_CoinMultiError, or nil if none found.
func (m *InfoCoinReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoCoinReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Balance != nil {
		// no validation rules for Balance
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if len(errors) > 0 {
		return InfoCoinReply_CoinMultiError(errors)
	}

	return nil
}

// InfoCoinReply_CoinMultiError is an error wrapping multiple validation errors
// returned by InfoCoinReply_Coin.ValidateAll() if the designated constraints
// aren't met.
type InfoCoinReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoCoinReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoCoinReply_CoinMultiError) AllErrors() []error { return m }

// InfoCoinReply_CoinValidationError is the validation error returned by
// InfoCoinReply_Coin.Validate if the designated constraints aren't met.
type InfoCoinReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoCoinReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoCoinReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoCoinReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoCoinReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoCoinReply_CoinValidationError) ErrorName() string {
	return "InfoCoinReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e InfoCoinReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoCoinReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoCoinReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoCoinReply_CoinValidationError{}
