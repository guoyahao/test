// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: samsara/v1/samsara.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCoinFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListCoinFlowRequest) Reset() {
	*x = ListCoinFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoinFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoinFlowRequest) ProtoMessage() {}

func (x *ListCoinFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoinFlowRequest.ProtoReflect.Descriptor instead.
func (*ListCoinFlowRequest) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{0}
}

func (x *ListCoinFlowRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ListCoinFlowRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCoinFlowRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCoinFlowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason  string                          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message *ListCoinFlowReply_CoinFlowList `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ListCoinFlowReply) Reset() {
	*x = ListCoinFlowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoinFlowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoinFlowReply) ProtoMessage() {}

func (x *ListCoinFlowReply) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoinFlowReply.ProtoReflect.Descriptor instead.
func (*ListCoinFlowReply) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{1}
}

func (x *ListCoinFlowReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCoinFlowReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListCoinFlowReply) GetMessage() *ListCoinFlowReply_CoinFlowList {
	if x != nil {
		return x.Message
	}
	return nil
}

type InfoCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *InfoCoinRequest) Reset() {
	*x = InfoCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCoinRequest) ProtoMessage() {}

func (x *InfoCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCoinRequest.ProtoReflect.Descriptor instead.
func (*InfoCoinRequest) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{2}
}

func (x *InfoCoinRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type InfoCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason  string              `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message *InfoCoinReply_Coin `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *InfoCoinReply) Reset() {
	*x = InfoCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCoinReply) ProtoMessage() {}

func (x *InfoCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCoinReply.ProtoReflect.Descriptor instead.
func (*InfoCoinReply) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{3}
}

func (x *InfoCoinReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InfoCoinReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InfoCoinReply) GetMessage() *InfoCoinReply_Coin {
	if x != nil {
		return x.Message
	}
	return nil
}

type OperateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CoinType int32 `protobuf:"varint,2,opt,name=coinType,proto3" json:"coinType,omitempty"`
	Funds    int64 `protobuf:"varint,3,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (x *OperateCoinRequest) Reset() {
	*x = OperateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateCoinRequest) ProtoMessage() {}

func (x *OperateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateCoinRequest.ProtoReflect.Descriptor instead.
func (*OperateCoinRequest) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{4}
}

func (x *OperateCoinRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OperateCoinRequest) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *OperateCoinRequest) GetFunds() int64 {
	if x != nil {
		return x.Funds
	}
	return 0
}

type OperateCoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *OperateCoinReply) Reset() {
	*x = OperateCoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateCoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateCoinReply) ProtoMessage() {}

func (x *OperateCoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateCoinReply.ProtoReflect.Descriptor instead.
func (*OperateCoinReply) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{5}
}

func (x *OperateCoinReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OperateCoinReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ListCoinFlowReply_CoinFlowList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  []*ListCoinFlowReply_CoinFlowList_CoinFlow `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Total int32                                      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListCoinFlowReply_CoinFlowList) Reset() {
	*x = ListCoinFlowReply_CoinFlowList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoinFlowReply_CoinFlowList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoinFlowReply_CoinFlowList) ProtoMessage() {}

func (x *ListCoinFlowReply_CoinFlowList) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoinFlowReply_CoinFlowList.ProtoReflect.Descriptor instead.
func (*ListCoinFlowReply_CoinFlowList) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListCoinFlowReply_CoinFlowList) GetInfo() []*ListCoinFlowReply_CoinFlowList_CoinFlow {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ListCoinFlowReply_CoinFlowList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListCoinFlowReply_CoinFlowList_CoinFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int64  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Uid       *int64  `protobuf:"varint,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Type      *int32  `protobuf:"varint,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Funds     *int64  `protobuf:"varint,4,opt,name=funds,proto3,oneof" json:"funds,omitempty"`
	CreatedAt *string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) Reset() {
	*x = ListCoinFlowReply_CoinFlowList_CoinFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoinFlowReply_CoinFlowList_CoinFlow) ProtoMessage() {}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoinFlowReply_CoinFlowList_CoinFlow.ProtoReflect.Descriptor instead.
func (*ListCoinFlowReply_CoinFlowList_CoinFlow) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) GetUid() int64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) GetFunds() int64 {
	if x != nil && x.Funds != nil {
		return *x.Funds
	}
	return 0
}

func (x *ListCoinFlowReply_CoinFlowList_CoinFlow) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

type InfoCoinReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int64  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Uid       *int64  `protobuf:"varint,2,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Status    *int32  `protobuf:"varint,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Balance   *int64  `protobuf:"varint,4,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	CreatedAt *string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
}

func (x *InfoCoinReply_Coin) Reset() {
	*x = InfoCoinReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samsara_v1_samsara_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCoinReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCoinReply_Coin) ProtoMessage() {}

func (x *InfoCoinReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_samsara_v1_samsara_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCoinReply_Coin.ProtoReflect.Descriptor instead.
func (*InfoCoinReply_Coin) Descriptor() ([]byte, []int) {
	return file_samsara_v1_samsara_proto_rawDescGZIP(), []int{3, 0}
}

func (x *InfoCoinReply_Coin) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InfoCoinReply_Coin) GetUid() int64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *InfoCoinReply_Coin) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *InfoCoinReply_Coin) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *InfoCoinReply_Coin) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

var File_samsara_v1_samsara_proto protoreflect.FileDescriptor

var file_samsara_v1_samsara_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x72, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd0, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xb3, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xbf, 0x01, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xc7, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a,
	0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x30, 0x01,
	0x30, 0x02, 0x30, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x32, 0xfc, 0x02, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61,
	0x12, 0x80, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x73, 0x61,
	0x72, 0x61, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x61, 0x6d, 0x73, 0x61,
	0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6d, 0x73,
	0x61, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x42, 0x25, 0x5a, 0x23, 0x53, 0x61, 0x6d, 0x73, 0x61, 0x72, 0x61, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x61, 0x6d,
	0x73, 0x61, 0x72, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_samsara_v1_samsara_proto_rawDescOnce sync.Once
	file_samsara_v1_samsara_proto_rawDescData = file_samsara_v1_samsara_proto_rawDesc
)

func file_samsara_v1_samsara_proto_rawDescGZIP() []byte {
	file_samsara_v1_samsara_proto_rawDescOnce.Do(func() {
		file_samsara_v1_samsara_proto_rawDescData = protoimpl.X.CompressGZIP(file_samsara_v1_samsara_proto_rawDescData)
	})
	return file_samsara_v1_samsara_proto_rawDescData
}

var file_samsara_v1_samsara_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_samsara_v1_samsara_proto_goTypes = []interface{}{
	(*ListCoinFlowRequest)(nil),                     // 0: api.samsara.v1.ListCoinFlowRequest
	(*ListCoinFlowReply)(nil),                       // 1: api.samsara.v1.ListCoinFlowReply
	(*InfoCoinRequest)(nil),                         // 2: api.samsara.v1.InfoCoinRequest
	(*InfoCoinReply)(nil),                           // 3: api.samsara.v1.InfoCoinReply
	(*OperateCoinRequest)(nil),                      // 4: api.samsara.v1.OperateCoinRequest
	(*OperateCoinReply)(nil),                        // 5: api.samsara.v1.OperateCoinReply
	(*ListCoinFlowReply_CoinFlowList)(nil),          // 6: api.samsara.v1.ListCoinFlowReply.CoinFlowList
	(*ListCoinFlowReply_CoinFlowList_CoinFlow)(nil), // 7: api.samsara.v1.ListCoinFlowReply.CoinFlowList.CoinFlow
	(*InfoCoinReply_Coin)(nil),                      // 8: api.samsara.v1.InfoCoinReply.Coin
}
var file_samsara_v1_samsara_proto_depIdxs = []int32{
	6, // 0: api.samsara.v1.ListCoinFlowReply.message:type_name -> api.samsara.v1.ListCoinFlowReply.CoinFlowList
	8, // 1: api.samsara.v1.InfoCoinReply.message:type_name -> api.samsara.v1.InfoCoinReply.Coin
	7, // 2: api.samsara.v1.ListCoinFlowReply.CoinFlowList.info:type_name -> api.samsara.v1.ListCoinFlowReply.CoinFlowList.CoinFlow
	0, // 3: api.samsara.v1.Samsara.ListCoinFlow:input_type -> api.samsara.v1.ListCoinFlowRequest
	2, // 4: api.samsara.v1.Samsara.InfoCoin:input_type -> api.samsara.v1.InfoCoinRequest
	4, // 5: api.samsara.v1.Samsara.OperateCoin:input_type -> api.samsara.v1.OperateCoinRequest
	1, // 6: api.samsara.v1.Samsara.ListCoinFlow:output_type -> api.samsara.v1.ListCoinFlowReply
	3, // 7: api.samsara.v1.Samsara.InfoCoin:output_type -> api.samsara.v1.InfoCoinReply
	5, // 8: api.samsara.v1.Samsara.OperateCoin:output_type -> api.samsara.v1.OperateCoinReply
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_samsara_v1_samsara_proto_init() }
func file_samsara_v1_samsara_proto_init() {
	if File_samsara_v1_samsara_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samsara_v1_samsara_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoinFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoinFlowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateCoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoinFlowReply_CoinFlowList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoinFlowReply_CoinFlowList_CoinFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samsara_v1_samsara_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCoinReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_samsara_v1_samsara_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_samsara_v1_samsara_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_samsara_v1_samsara_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_samsara_v1_samsara_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samsara_v1_samsara_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_samsara_v1_samsara_proto_goTypes,
		DependencyIndexes: file_samsara_v1_samsara_proto_depIdxs,
		MessageInfos:      file_samsara_v1_samsara_proto_msgTypes,
	}.Build()
	File_samsara_v1_samsara_proto = out.File
	file_samsara_v1_samsara_proto_rawDesc = nil
	file_samsara_v1_samsara_proto_goTypes = nil
	file_samsara_v1_samsara_proto_depIdxs = nil
}
