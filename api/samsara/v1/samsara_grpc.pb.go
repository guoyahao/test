// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: samsara/v1/samsara.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SamsaraClient is the client API for Samsara service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamsaraClient interface {
	ListCoinFlow(ctx context.Context, in *ListCoinFlowRequest, opts ...grpc.CallOption) (*ListCoinFlowReply, error)
	InfoCoin(ctx context.Context, in *InfoCoinRequest, opts ...grpc.CallOption) (*InfoCoinReply, error)
	OperateCoin(ctx context.Context, in *OperateCoinRequest, opts ...grpc.CallOption) (*OperateCoinReply, error)
}

type samsaraClient struct {
	cc grpc.ClientConnInterface
}

func NewSamsaraClient(cc grpc.ClientConnInterface) SamsaraClient {
	return &samsaraClient{cc}
}

func (c *samsaraClient) ListCoinFlow(ctx context.Context, in *ListCoinFlowRequest, opts ...grpc.CallOption) (*ListCoinFlowReply, error) {
	out := new(ListCoinFlowReply)
	err := c.cc.Invoke(ctx, "/api.samsara.v1.Samsara/ListCoinFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samsaraClient) InfoCoin(ctx context.Context, in *InfoCoinRequest, opts ...grpc.CallOption) (*InfoCoinReply, error) {
	out := new(InfoCoinReply)
	err := c.cc.Invoke(ctx, "/api.samsara.v1.Samsara/InfoCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samsaraClient) OperateCoin(ctx context.Context, in *OperateCoinRequest, opts ...grpc.CallOption) (*OperateCoinReply, error) {
	out := new(OperateCoinReply)
	err := c.cc.Invoke(ctx, "/api.samsara.v1.Samsara/OperateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamsaraServer is the server API for Samsara service.
// All implementations must embed UnimplementedSamsaraServer
// for forward compatibility
type SamsaraServer interface {
	ListCoinFlow(context.Context, *ListCoinFlowRequest) (*ListCoinFlowReply, error)
	InfoCoin(context.Context, *InfoCoinRequest) (*InfoCoinReply, error)
	OperateCoin(context.Context, *OperateCoinRequest) (*OperateCoinReply, error)
	mustEmbedUnimplementedSamsaraServer()
}

// UnimplementedSamsaraServer must be embedded to have forward compatible implementations.
type UnimplementedSamsaraServer struct {
}

func (UnimplementedSamsaraServer) ListCoinFlow(context.Context, *ListCoinFlowRequest) (*ListCoinFlowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoinFlow not implemented")
}
func (UnimplementedSamsaraServer) InfoCoin(context.Context, *InfoCoinRequest) (*InfoCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoCoin not implemented")
}
func (UnimplementedSamsaraServer) OperateCoin(context.Context, *OperateCoinRequest) (*OperateCoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateCoin not implemented")
}
func (UnimplementedSamsaraServer) mustEmbedUnimplementedSamsaraServer() {}

// UnsafeSamsaraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamsaraServer will
// result in compilation errors.
type UnsafeSamsaraServer interface {
	mustEmbedUnimplementedSamsaraServer()
}

func RegisterSamsaraServer(s grpc.ServiceRegistrar, srv SamsaraServer) {
	s.RegisterService(&Samsara_ServiceDesc, srv)
}

func _Samsara_ListCoinFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamsaraServer).ListCoinFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.samsara.v1.Samsara/ListCoinFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamsaraServer).ListCoinFlow(ctx, req.(*ListCoinFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samsara_InfoCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamsaraServer).InfoCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.samsara.v1.Samsara/InfoCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamsaraServer).InfoCoin(ctx, req.(*InfoCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samsara_OperateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamsaraServer).OperateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.samsara.v1.Samsara/OperateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamsaraServer).OperateCoin(ctx, req.(*OperateCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Samsara_ServiceDesc is the grpc.ServiceDesc for Samsara service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Samsara_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.samsara.v1.Samsara",
	HandlerType: (*SamsaraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoinFlow",
			Handler:    _Samsara_ListCoinFlow_Handler,
		},
		{
			MethodName: "InfoCoin",
			Handler:    _Samsara_InfoCoin_Handler,
		},
		{
			MethodName: "OperateCoin",
			Handler:    _Samsara_OperateCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samsara/v1/samsara.proto",
}
