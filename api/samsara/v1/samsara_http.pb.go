// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSamsaraInfoCoin = "/api.samsara.v1.Samsara/InfoCoin"
const OperationSamsaraListCoinFlow = "/api.samsara.v1.Samsara/ListCoinFlow"
const OperationSamsaraOperateCoin = "/api.samsara.v1.Samsara/OperateCoin"

type SamsaraHTTPServer interface {
	InfoCoin(context.Context, *InfoCoinRequest) (*InfoCoinReply, error)
	ListCoinFlow(context.Context, *ListCoinFlowRequest) (*ListCoinFlowReply, error)
	OperateCoin(context.Context, *OperateCoinRequest) (*OperateCoinReply, error)
}

func RegisterSamsaraHTTPServer(s *http.Server, srv SamsaraHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/samsara/coinflow/list", _Samsara_ListCoinFlow0_HTTP_Handler(srv))
	r.POST("/api/v1/samsara/coin/info", _Samsara_InfoCoin0_HTTP_Handler(srv))
	r.POST("/api/v1/samsara/coin/operate", _Samsara_OperateCoin0_HTTP_Handler(srv))
}

func _Samsara_ListCoinFlow0_HTTP_Handler(srv SamsaraHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCoinFlowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSamsaraListCoinFlow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoinFlow(ctx, req.(*ListCoinFlowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCoinFlowReply)
		return ctx.Result(200, reply)
	}
}

func _Samsara_InfoCoin0_HTTP_Handler(srv SamsaraHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InfoCoinRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSamsaraInfoCoin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InfoCoin(ctx, req.(*InfoCoinRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InfoCoinReply)
		return ctx.Result(200, reply)
	}
}

func _Samsara_OperateCoin0_HTTP_Handler(srv SamsaraHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperateCoinRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSamsaraOperateCoin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperateCoin(ctx, req.(*OperateCoinRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperateCoinReply)
		return ctx.Result(200, reply)
	}
}

type SamsaraHTTPClient interface {
	InfoCoin(ctx context.Context, req *InfoCoinRequest, opts ...http.CallOption) (rsp *InfoCoinReply, err error)
	ListCoinFlow(ctx context.Context, req *ListCoinFlowRequest, opts ...http.CallOption) (rsp *ListCoinFlowReply, err error)
	OperateCoin(ctx context.Context, req *OperateCoinRequest, opts ...http.CallOption) (rsp *OperateCoinReply, err error)
}

type SamsaraHTTPClientImpl struct {
	cc *http.Client
}

func NewSamsaraHTTPClient(client *http.Client) SamsaraHTTPClient {
	return &SamsaraHTTPClientImpl{client}
}

func (c *SamsaraHTTPClientImpl) InfoCoin(ctx context.Context, in *InfoCoinRequest, opts ...http.CallOption) (*InfoCoinReply, error) {
	var out InfoCoinReply
	pattern := "/api/v1/samsara/coin/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSamsaraInfoCoin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SamsaraHTTPClientImpl) ListCoinFlow(ctx context.Context, in *ListCoinFlowRequest, opts ...http.CallOption) (*ListCoinFlowReply, error) {
	var out ListCoinFlowReply
	pattern := "/api/v1/samsara/coinflow/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSamsaraListCoinFlow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SamsaraHTTPClientImpl) OperateCoin(ctx context.Context, in *OperateCoinRequest, opts ...http.CallOption) (*OperateCoinReply, error) {
	var out OperateCoinReply
	pattern := "/api/v1/samsara/coin/operate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSamsaraOperateCoin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
